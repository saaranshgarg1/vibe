/*
This file is Exports hooks for OpenAPI endpoints using the api client.
It is most certain that this file is not bugged.
Do not edit this file manually.
*/

import { api } from '../lib/openapi';
import { components } from '../types/schema';

// Auth hooks

// POST /auth/verify
export function useLogin(): {
  data: components['schemas']['TokenVerificationResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("post", "/auth/verify", {});
  
  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Login failed') : null,
    refetch: result.refetch
  };
}

// POST /auth/signup
export function useSignup(): {
  mutate: (variables: { body: components['schemas']['SignUpBody'] }) => void,
  mutateAsync: (variables: { body: components['schemas']['SignUpBody'] }) => Promise<components['schemas']['SignUpResponse']>,
  data: components['schemas']['SignUpResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/auth/signup");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Signup failed') : null
  };
}

// POST /auth/signup/verify
export function useVerifySignUpProvider(): {
  mutate: (variables: { body: components['schemas']['VerifySignUpProviderBody'] }) => void,
  mutateAsync: (variables: { body: components['schemas']['VerifySignUpProviderBody'] }) => Promise<components['schemas']['SignUpResponse']>,
  data: components['schemas']['SignUpResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/auth/signup/verify");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Verification failed') : null
  };
}

// PATCH /auth/change-password
export function useChangePassword(): {
  mutate: (variables: { body: components['schemas']['ChangePasswordBody'] }) => void,
  mutateAsync: (variables: { body: components['schemas']['ChangePasswordBody'] }) => Promise<components['schemas']['ChangePasswordResponse']>,
  data: components['schemas']['ChangePasswordResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("patch", "/auth/change-password");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Password change failed') : null
  };
}

// Course hooks

// POST /courses/
export function useCreateCourse(): {
  mutate: (variables: { body: components['schemas']['CreateCourseBody'] }) => void,
  mutateAsync: (variables: { body: components['schemas']['CreateCourseBody'] }) => Promise<components['schemas']['CourseDataResponse']>,
  data: components['schemas']['CourseDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/courses/");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Course creation failed') : null
  };
}

// GET /courses/{id}
export function useCourseById(id: string): { 
  data: components['schemas']['CourseDataResponse'] | undefined, 
  isLoading: boolean, 
  error: string | null, 
  refetch: () => void 
} {
  const result = api.useQuery("get", "/courses/{id}", { 
    params: { path: { id } }
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch course') : null,
    refetch: result.refetch
  };
}

// PUT /courses/{id}
export function useUpdateCourse(): {
  mutate: (variables: { params: { path: { id: string } }, body: components['schemas']['UpdateCourseBody'] }) => void,
  mutateAsync: (variables: { params: { path: { id: string } }, body: components['schemas']['UpdateCourseBody'] }) => Promise<components['schemas']['CourseDataResponse']>,
  data: components['schemas']['CourseDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/{id}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Course update failed') : null
  };
}

// Course Version hooks

// POST /courses/{id}/versions
export function useCreateCourseVersion(): {
  mutate: (variables: { params: { path: { id: string } }, body: components['schemas']['CreateCourseVersionBody'] }) => void,
  mutateAsync: (variables: { params: { path: { id: string } }, body: components['schemas']['CreateCourseVersionBody'] }) => Promise<components['schemas']['CreateCourseVersionResponse']>,
  data: components['schemas']['CreateCourseVersionResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/courses/{id}/versions");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Course version creation failed') : null
  };
}

// GET /courses/versions/{id}
export function useCourseVersionById(id: string): {
  data: components['schemas']['CourseVersionDataResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/courses/versions/{id}", {
    params: { path: { id } }
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch course version') : null,
    refetch: result.refetch
  };
}

// DELETE /courses/{courseId}/versions/{versionId}
export function useDeleteCourseVersion(): {
  mutate: (variables: { params: { path: { courseId: string, versionId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { courseId: string, versionId: string } } }) => Promise<components['schemas']['DeleteCourseVersionParams']>,
  data: components['schemas']['DeleteCourseVersionParams'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("delete", "/courses/{courseId}/versions/{versionId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Course version deletion failed') : null
  };
}

// Module hooks

// POST /courses/versions/{versionId}/modules
export function useCreateModule(): {
  mutate: (variables: { params: { path: { versionId: string } }, body: components['schemas']['CreateModuleBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string } }, body: components['schemas']['CreateModuleBody'] }) => Promise<components['schemas']['ModuleDataResponse']>,
  data: components['schemas']['ModuleDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/courses/versions/{versionId}/modules");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Module creation failed') : null
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}
export function useUpdateModule(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['UpdateModuleBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['UpdateModuleBody'] }) => Promise<components['schemas']['ModuleDataResponse']>,
  data: components['schemas']['ModuleDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Module update failed') : null
  };
}

// DELETE /courses/versions/{versionId}/modules/{moduleId}
export function useDeleteModule(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string } } }) => Promise<components['schemas']['ModuleDeletedResponse']>,
  data: components['schemas']['ModuleDeletedResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("delete", "/courses/versions/{versionId}/modules/{moduleId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Module deletion failed') : null
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}/move
export function useMoveModule(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['MoveModuleBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['MoveModuleBody'] }) => Promise<components['schemas']['ModuleDataResponse']>,
  data: components['schemas']['ModuleDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}/move");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Module move failed') : null
  };
}

// Section hooks

// POST /courses/versions/{versionId}/modules/{moduleId}/sections
export function useCreateSection(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['CreateSectionBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['CreateSectionBody'] }) => Promise<components['schemas']['SectionDataResponse']>,
  data: components['schemas']['SectionDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/courses/versions/{versionId}/modules/{moduleId}/sections");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Section creation failed') : null
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}
export function useUpdateSection(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['UpdateSectionBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['UpdateSectionBody'] }) => Promise<components['schemas']['SectionDataResponse']>,
  data: components['schemas']['SectionDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Section update failed') : null
  };
}

// DELETE /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}
export function useDeleteSection(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } } }) => Promise<components['schemas']['SectionDeletedResponse']>,
  data: components['schemas']['SectionDeletedResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("delete", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Section deletion failed') : null
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/move
export function useMoveSection(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['MoveSectionBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['MoveSectionBody'] }) => Promise<components['schemas']['SectionDataResponse']>,
  data: components['schemas']['SectionDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/move");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Section move failed') : null
  };
}

// Item hooks

// GET /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items
export function useItemsBySectionId(versionId: string, moduleId: string, sectionId: string): {
  data: components['schemas']['ItemDataResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items", {
    params: { path: { versionId, moduleId, sectionId } }
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch items') : null,
    refetch: result.refetch
  };
}

// POST /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items
export function useCreateItem(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['CreateItemBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['CreateItemBody'] }) => Promise<components['schemas']['ItemDataResponse']>,
  data: components['schemas']['ItemDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Item creation failed') : null
  };
}

// GET /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}
export function useItemById(courseId: string, versionId: string, itemId: string): {
  data: components['schemas']['ItemDataResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/courses/{courseId}/versions/{versionId}/item/{itemId}", {
    params: { path: { courseId, versionId, itemId } }
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch item') : null,
    refetch: result.refetch
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}
export function useUpdateItem(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string, itemId: string } }, body: components['schemas']['UpdateItemBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string, itemId: string } }, body: components['schemas']['UpdateItemBody'] }) => Promise<components['schemas']['ItemDataResponse']>,
  data: components['schemas']['ItemDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Item update failed') : null
  };
}

// DELETE /courses/itemGroups/{itemsGroupId}/items/{itemId}
export function useDeleteItem(): {
  mutate: (variables: { params: { path: { itemsGroupId: string, itemId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { itemsGroupId: string, itemId: string } } }) => Promise<components['schemas']['DeletedItemResponse']>,
  data: components['schemas']['DeletedItemResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("delete", "/courses/itemGroups/{itemsGroupId}/items/{itemId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Item deletion failed') : null
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}/move
export function useMoveItem(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string, itemId: string } }, body: components['schemas']['MoveItemBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string, itemId: string } }, body: components['schemas']['MoveItemBody'] }) => Promise<components['schemas']['ItemDataResponse']>,
  data: components['schemas']['ItemDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}/move");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Item move failed') : null
  };
}

// Enrollment hooks

// POST /users/{userId}/enrollments/courses/{courseId}/versions/{courseVersionId}
export function useEnrollUser(): {
  mutate: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } } }) => Promise<components['schemas']['EnrollUserResponseData']>,
  data: components['schemas']['EnrollUserResponseData'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/users/{userId}/enrollments/courses/{courseId}/versions/{courseVersionId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'User enrollment failed') : null
  };
}

// POST /users/{userId}/enrollments/courses/{courseId}/versions/{courseVersionId}/unenroll
export function useUnenrollUser(): {
  mutate: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } } }) => Promise<components['schemas']['EnrollUserResponseData']>,
  data: components['schemas']['EnrollUserResponseData'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/users/{userId}/enrollments/courses/{courseId}/versions/{courseVersionId}/unenroll");
  return {
    ...result,
    error: result.error ? (result.error.message || 'User unenrollment failed') : null
  };
}

// GET /users/{userId}/enrollments
export function useUserEnrollments(userId: string | undefined, page?: number, limit?: number, enabled: boolean = true): {
  data: components['schemas']['EnrollmentResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/users/{userId}/enrollments", {
    params: { 
      path: { userId },
      query: { page, limit }
    },
      enabled: enabled && !!userId
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch user enrollments') : null,
    refetch: result.refetch
  };
}

// Progress hooks

// GET /users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/
export function useUserProgress(userId: string, courseId: string, courseVersionId: string): {
  data: components['schemas']['ProgressDataResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/", {
    params: { path: { userId, courseId, courseVersionId } }
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch user progress') : null,
    refetch: result.refetch
  };
}

// POST /users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/start
export function useStartItem(): {
  mutate: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['StartItemBody'] }) => void,
  mutateAsync: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['StartItemBody'] }) => Promise<components['schemas']['StartItemResponse']>,
  data: components['schemas']['StartItemResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/start");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Failed to start item') : null
  };
}

// POST /users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/stop
export function useStopItem(): {
  mutate: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['StopItemBody'] }) => void,
  mutateAsync: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['StopItemBody'] }) => Promise<unknown>,
  data: unknown | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/stop");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Failed to stop item') : null
  };
}

// PATCH /users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/update
export function useUpdateProgress(): {
  mutate: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['UpdateProgressBody'] }) => void,
  mutateAsync: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['UpdateProgressBody'] }) => Promise<unknown>,
  data: unknown | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("patch", "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/update");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Failed to update progress') : null
  };
}

// PATCH /users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/reset
export function useResetProgress(): {
  mutate: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['ResetCourseProgressBody'] }) => void,
  mutateAsync: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['ResetCourseProgressBody'] }) => Promise<unknown>,
  data: unknown | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("patch", "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/reset");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Failed to reset progress') : null
  };
}

// User hooks

export function useUserByFirebaseUID(firebaseUID: string): {
  data: components['schemas']['UserByFirebaseUIDResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/users/firebase/{firebaseUID}", {
    params: { path: { firebaseUID } }
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch user by Firebase UID') : null,
    refetch: result.refetch
  };
}

// Types for quiz questions
export interface BufferId {
  buffer: {
    type: "Buffer";
    data: number[];
  };
}

export interface LotItem {
  text: string; 
  _id: BufferId;
}

export interface BaseQuestionRenderView {
  _id: BufferId;
  type: string;
  isParameterized: boolean;
  text: string;
  hint: string;
  points: number;
  timeLimitSeconds: number;
  parameterMap: Record<string, unknown>;
}

export interface DescriptiveQuestionRenderView extends BaseQuestionRenderView {
  type: "DESCRIPTIVE";
}

export interface SelectManyInLotQuestionRenderView extends BaseQuestionRenderView {
  type: "SELECT_MANY_IN_LOT";
  lotItems: LotItem[];
}

export interface OrderTheLotsQuestionRenderView extends BaseQuestionRenderView {
  type: "ORDER_THE_LOTS";
  lotItems: LotItem[];
}

export interface NumericAnswerQuestionRenderView extends BaseQuestionRenderView {
  type: "NUMERIC_ANSWER_TYPE";
  decimalPrecision: number;
  expression: string;
}

export interface SelectOneInLotQuestionRenderView extends BaseQuestionRenderView {
  type: "SELECT_ONE_IN_LOT";
  lotItems: LotItem[];
}

export type QuestionRenderView = 
  | DescriptiveQuestionRenderView
  | SelectManyInLotQuestionRenderView
  | OrderTheLotsQuestionRenderView
  | NumericAnswerQuestionRenderView
  | SelectOneInLotQuestionRenderView;

// Quiz hooks
export function useAttemptQuiz(): {
  mutate: (variables: { params: { path: { quizId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { quizId: string } } }) => Promise<{
    attemptId: string,
    questionRenderViews: QuestionRenderView[]
  }>,
  data: {
    attemptId: string,
    questionRenderViews: QuestionRenderView[]
  } | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/quizzes/{quizId}/attempt")
  return {
    mutate: result.mutate,
    mutateAsync: result.mutateAsync,
    data: result.data,
    isPending: result.isPending,
    isSuccess: result.isSuccess,
    isError: result.isError,
    isIdle: result.isIdle,
    reset: result.reset,
    status: result.status,
    error: result.error ? (result.error.message || 'Failed to attempt quiz') : null
  };
}

type SaveQuestion = {
  questionId: string;
  questionType: "DESCRIPTIVE" | "SELECT_MANY_IN_LOT" | "ORDER_THE_LOTS" | "NUMERIC_ANSWER_TYPE" | "SELECT_ONE_IN_LOT";
  answer: {
    lotItemId?: string;
    lotItemIds?: string[];
    text?: string;
    numericAnswer?: string;
    order?: string[];
  }
};

export function useSaveQuiz(): {
  mutate: (variables: { params: { path: { quizId: string, attemptId: string} }, body:{answers: SaveQuestion[]} }) => void,
  mutateAsync: (variables: { params: { path: { quizId: string, attemptId: string} }, body:{answers: SaveQuestion[]} }) => Promise<void>,
  data: void,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/quizzes/{quizId}/attempt/{attemptId}/save");
  return {
    mutate: result.mutate,
    mutateAsync: result.mutateAsync,
    data: result.data,
    isPending: result.isPending,
    isSuccess: result.isSuccess,
    isError: result.isError,
    isIdle: result.isIdle,
    reset: result.reset,
    status: result.status,
    error: result.error ? (result.error.message || 'Failed to attempt quiz') : null
  };
}

export interface IQuestionAnswerFeedback {
  questionId: string;
  status: 'CORRECT' | 'INCORRECT' | 'PARTIAL';
  score: number;
  answerFeedback?: string;
}

export interface SubmitQuizResponse {
  totalScore?: number;
  totalMaxScore?: number;
  overallFeedback?: IQuestionAnswerFeedback[];
  gradingStatus: 'PENDING' | 'PASSED' | 'FAILED';
  gradedAt?: string;
  gradedBy?: string;
}

export function useSubmitQuiz(): {
  mutate: (variables: { params: { path: { quizId: string, attemptId: string} }, body:{answers: SaveQuestion[]} }) => SubmitQuizResponse,
  mutateAsync: (variables: { params: { path: { quizId: string, attemptId: string} }, body:{answers: SaveQuestion[]} }) => Promise<SubmitQuizResponse>,
  data: SubmitQuizResponse | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/quizzes/{quizId}/attempt/{attemptId}/submit");
  return {
    mutate: result.mutate,
    mutateAsync: result.mutateAsync,
    data: result.data,
    isPending: result.isPending,
    isSuccess: result.isSuccess,
    isError: result.isError,
    isIdle: result.isIdle,
    reset: result.reset,
    status: result.status,
    error: result.error ? (result.error.message || 'Failed to attempt quiz') : null
  };
}

interface ReportAnomalyBody {
  userId: string;
  courseId: string;
  courseVersionId: string;
  moduleId?: string;
  sectionId?: string;
  itemId?: string;
  anomalyType: string;
}

interface ReportAnomalyResponse {
  // Define the structure of the response here
  _id: string;
  userId: string;
  courseId: string;
  courseVersionId: string;
  moduleId?: string;
  sectionId?: string;
  itemId?: string;
  anomalyType: string;
}

export function useReportAnomaly(): {
  mutate: (variables: { body: ReportAnomalyBody }) => void,
  mutateAsync: (variables: { body: ReportAnomalyBody }) => Promise<ReportAnomalyResponse>,
  data: ReportAnomalyResponse | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/users/anomaly/");
  return {
    mutate: result.mutate,
    mutateAsync: result.mutateAsync,
    data: result.data,
    isPending: result.isPending,
    isSuccess: result.isSuccess,
    isError: result.isError,
    isIdle: result.isIdle,
    reset: result.reset,
    status: result.status,
    error: result.error ? (result.error || 'Failed to report anomaly') : null
  };
}

export interface ProctoringSettings {
  _id: string;
  userId: string;
  versionId: string;
  courseId: string;
  settings: {
    proctors: {
      detectors: {
        detectorName: string;
        settings: {
          enabled: boolean;
        }
      }[]
    }
}
}

export function useProctoringSettings(userId: string, courseId: string, versionId: string ): {
  data:  | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/settings/users/{userId}/{courseId}/{versionId}", {
    params: { path: { userId, courseId, versionId } }
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch user by Firebase UID') : null,
    refetch: result.refetch
  };
}