/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register User
         * @description Creates a new user account with the provided credentials.
         */
        post: operations["AuthController.signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signup/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify User
         * @description Creates a new user account using the token provided.
         */
        post: operations["AuthController.verifySignUpProvider"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Change Password
         * @description Changes the authenticated user's password to the new password provided.
         */
        patch: operations["AuthController.changePassword"];
        trace?: never;
    };
    "/auth/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify Token
         * @description Verifies if the user's authentication token is valid and belongs to an admin user.
         */
        post: operations["AuthController.verifyToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Course
         * @description Creates a new course with the provided details.
         */
        post: operations["CourseController.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Course
         * @description Retrieves the course details for the specified course ID.
         */
        get: operations["CourseController.read"];
        /**
         * Update Course
         * @description Updates the course details for the specified course ID.
         */
        put: operations["CourseController.update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/{id}/versions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Course Version
         * @description Creates a new version for a specific course.
         */
        post: operations["CourseVersionController.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/versions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Course Version
         * @description Retrieves a course version by its ID.
         */
        get: operations["CourseVersionController.read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/{courseId}/versions/{versionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Course Version
         * @description Deletes a course version by its ID.
         */
        delete: operations["CourseVersionController.delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/versions/{versionId}/modules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Module
         * @description Creates a new module in the specified course version with the provided details.
         */
        post: operations["ModuleController.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/versions/{versionId}/modules/{moduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Module
         * @description Updates an existing module's name or description within a course version.
         */
        put: operations["ModuleController.update"];
        post?: never;
        /**
         * Delete Module
         * @description Permanently removes a module from a course version.
         */
        delete: operations["ModuleController.delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/versions/{versionId}/modules/{moduleId}/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Move Module
         * @description Reorders a module within its course version by placing it before or after another module.
         */
        put: operations["ModuleController.move"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/versions/{versionId}/modules/{moduleId}/sections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Section
         * @description Creates a new section in the specified module and automatically generates an associated items group.
         */
        post: operations["SectionController.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Section
         * @description Updates an existing section's name or description within a module.
         */
        put: operations["SectionController.update"];
        post?: never;
        /**
         * Delete Section
         * @description Permanently removes a section from a module.
         */
        delete: operations["SectionController.delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Move Section
         * @description Reorders a section within its module by placing it before or after another section.
         */
        put: operations["SectionController.move"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Items
         * @description Retrieves all items from the specified section of a module in a course version.
         */
        get: operations["ItemController.readAll"];
        put?: never;
        /**
         * Create Item
         * @description Creates a new item in the specified section with the provided details.
         */
        post: operations["ItemController.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Item
         * @description Retrieves a specific item from the specified section of a module in a course version.
         */
        get: operations["ItemController.readItem"];
        /**
         * Update Item
         * @description Updates an existing item in the specified section with the provided details.
         */
        put: operations["ItemController.update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/itemGroups/{itemsGroupId}/items/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Item
         * @description Deletes an item from a course section permanently.
         */
        delete: operations["ItemController.delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Move Item
         * @description Moves an item to a new position within its section by recalculating its order.
         */
        put: operations["ItemController.move"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/enrollments/courses/{courseId}/versions/{courseVersionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enroll User in Course
         * @description Enrolls a user in a specific version of a course.
         */
        post: operations["EnrollmentController.enrollUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/enrollments/courses/{courseId}/versions/{courseVersionId}/unenroll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unenroll User from Course
         * @description Unenrolls a user from a specific version of a course.
         */
        post: operations["EnrollmentController.unenrollUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/enrollments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Enrollments
         * @description Retrieves a paginated list of courses and course versions a user is enrolled in.
         */
        get: operations["EnrollmentController.getUserEnrollments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Progress
         * @description Retrieves a user's progress for a specific course version.
         */
        get: operations["ProgressController.getUserProgress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start Course Item
         * @description Starts tracking a user's progress on a specific course item.
         */
        post: operations["ProgressController.startItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stop Course Item
         * @description Stops tracking a user's progress on a specific course item.
         */
        post: operations["ProgressController.stopItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Progress
         * @description Updates a user's progress for a specific course item.
         */
        patch: operations["ProgressController.updateProgress"];
        trace?: never;
    };
    "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Reset Course Progress
         * @description Resets a user's progress for a course, module, section, or item.
         */
        patch: operations["ProgressController.resetProgress"];
        trace?: never;
    };
    "/users/firebase/{firebaseUID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User by Firebase UID
         * @description Retrieves a user ID using their Firebase UID.
         */
        get: operations["UserController.getUserByFirebaseUID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SignUpBody: {
            /**
             * Email Address
             * Format: email
             * @description Email address of the user, used as login identifier
             * @example user@example.com
             */
            email: string;
            /**
             * Password
             * Format: password
             * @description Password for account authentication (minimum 8 characters). Must contain: <br />1. **Uppercase letters** (A–Z)  <br /> 2. **Lowercase letters** (a–z)  <br /> 3. **Numbers** (0–9)   <br />4. **Special symbols** (`! @ # $ % ^ & * ( ) – _ = + [ ] { } | ; : , . ? /`)
             * @example SecureP@ssw0rd
             */
            password: string;
            /**
             * First Name
             * @description User's first name (alphabetic characters only)
             * @example John
             */
            firstName: string;
            /**
             * Last Name
             * @description User's last name (alphabetic characters only)
             * @example Smith
             */
            lastName: string;
        };
        VerifySignUpProviderBody: {
            /**
             * Token
             * @description Token used for signup verification
             * @example 43jdlsaksla;f328e9fjhsda
             */
            token: string;
        };
        ChangePasswordBody: {
            /**
             * New Password
             * Format: password
             * @description New password that meets security requirements.  Must contain: <br />1. **Uppercase letters** (A–Z)  <br /> 2. **Lowercase letters** (a–z)  <br /> 3. **Numbers** (0–9)   <br />4. **Special symbols** (`! @ # $ % ^ & * ( ) – _ = + [ ] { } | ; : , . ? /`)
             * @example SecureP@ssw0rd
             */
            newPassword: string;
            /**
             * Confirm New Password
             * Format: password
             * @description Confirmation of the new password (must match exactly). Must contain: <br />1. **Uppercase letters** (A–Z)  <br /> 2. **Lowercase letters** (a–z)  <br /> 3. **Numbers** (0–9)   <br />4. **Special symbols** (`! @ # $ % ^ & * ( ) – _ = + [ ] { } | ; : , . ? /`)
             * @example SecureP@ssw0rd
             */
            newPasswordConfirm: string;
        };
        SignUpResponse: {
            /**
             * @description Unique identifier for the user
             * @example cKy6H2O04PgTh8O3DpUXjgJYUr53
             */
            readonly uid: string;
            /**
             * Format: email
             * @description Email address of the registered user
             * @example user@example.com
             */
            readonly email: string;
            /**
             * @description User's first name
             * @example John
             */
            readonly firstName: string;
            /**
             * @description User's last name
             * @example Smith
             */
            readonly lastName: string;
        };
        ChangePasswordResponse: {
            /**
             * @description Indicates the operation was successful
             * @example true
             */
            readonly success: boolean;
            /**
             * @description Success message
             * @example Password changed successfully
             */
            readonly message: string;
        };
        TokenVerificationResponse: {
            /**
             * @description Confirmation message for valid token
             * @example Token is valid
             */
            readonly message: string;
        };
        AuthErrorResponse: {
            /**
             * @description The error message
             * @example Invalid credentials. Please check your email and password.
             */
            readonly message: string;
        };
        ValidationErrorResponse: {
            /** @description The object that was validated. */
            readonly target: Record<string, never>;
            /** @description The property that failed validation. */
            readonly property: string;
            /** @description Constraints that failed validation with error messages. */
            readonly constraints: Record<string, never>;
            /**
             * Format: ValidationErrorResponse
             * @description Contains all nested validation errors of the property.
             */
            readonly children: Record<string, never>[];
            /** @description Contains all nested validation errors of the property. */
            readonly contexts?: Record<string, never>;
        };
        DefaultErrorResponse: {
            /** @description The error message. */
            readonly message: string;
        };
        BadRequestErrorResponse: {
            /** @description The error message. */
            readonly message: string;
            /** @description The error details. */
            readonly errors: components["schemas"]["ValidationErrorResponse"];
        };
        CreateCourseBody: {
            /**
             * Course Name
             * @description Name of the course
             * @example Introduction to Programming
             */
            name: string;
            /**
             * Course Description
             * @description Description of the course
             * @example This course covers the basics of programming.
             */
            description: string;
        };
        UpdateCourseBody: {
            /**
             * @description Name of the course
             * @example Introduction to Programming
             */
            name?: string;
            /**
             * @description Description of the course
             * @example This course covers the basics of programming.
             */
            description?: string;
            /**
             * @deprecated
             * @description [READONLY] This is a virtual field used only for validation. Do not include this field in requests.
             *     Either "name" or "description" must be provided.
             */
            readonly nameOrDescription?: string;
        };
        ReadCourseParams: {
            /**
             * Format: Mongo Object ID
             * @description Object ID of the course to read
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            id: string;
        };
        UpdateCourseParams: {
            /**
             * Format: Mongo Object ID
             * @description Object ID of the course to update
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            id: string;
        };
        CourseDataResponse: {
            /**
             * Format: Mongo Object ID
             * @description Unique identifier for the course
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            readonly _id: string;
            /**
             * @description Name of the course
             * @example Introduction to Programming
             */
            name: string;
            /**
             * @description Description of the course
             * @example This course covers the basics of programming.
             */
            description: string;
            /**
             * @description List of course version IDs
             * @example [
             *       "60d5ec49b3f1c8e4a8f8b8c2",
             *       "60d5ec49b3f1c8e4a8f8b8c3"
             *     ]
             */
            readonly versions: string[];
            /**
             * @description List of instructor IDs associated with the course
             * @example [
             *       "60d5ec49b3f1c8e4a8f8b8c4",
             *       "60d5ec49b3f1c8e4a8f8b8c5"
             *     ]
             */
            readonly instructors: string[];
            /**
             * Course Created At
             * Format: date-time
             * @description Timestamp when the course was created
             * @example 2023-10-01T12:00:00Z
             */
            readonly createdAt: string;
            /**
             * Course Updated At
             * Format: date-time
             * @description Timestamp when the course was last updated
             * @example 2023-10-01T12:00:00Z
             */
            readonly updatedAt: string;
        };
        CourseNotFoundErrorResponse: {
            /**
             * @description The error message.
             * @example No course found with the specified ID. Please verify the ID and try again.
             */
            readonly message: string;
        };
        CourseVersion: {
            modules: Record<string, never>[];
        };
        CreateCourseVersionBody: {
            /**
             * Course ID
             * Format: Mongo Object ID
             * @description ID of the course this version belongs to (auto-managed)
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            readonly courseId?: string | "" | unknown;
            /**
             * Version Label
             * @description The version label or identifier (e.g., v1.0, Fall 2025)
             * @example v1.0
             */
            version: string;
            /**
             * Version Description
             * @description A brief description of the course version
             * @example First release of the course
             */
            description: string;
        };
        CreateCourseVersionParams: {
            /**
             * Course ID
             * Format: Mongo Object ID
             * @description ID of the course to attach the new version to
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            id: string;
        };
        ReadCourseVersionParams: {
            /**
             * Version ID
             * Format: Mongo Object ID
             * @description ID of the course version to retrieve
             * @example 60d5ec49b3f1c8e4a8f8b8d2
             */
            id: string;
        };
        DeleteCourseVersionParams: {
            /**
             * Version ID
             * Format: Mongo Object ID
             * @description ID of the course version to delete
             * @example 60d5ec49b3f1c8e4a8f8b8d2
             */
            versionId: string;
            /**
             * Course ID
             * Format: Mongo Object ID
             * @description ID of the course to which the version belongs
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            courseId: string;
        };
        CourseVersionDataResponse: {
            /**
             * Format: Mongo Object ID
             * @description ID of the course version
             * @example 60d5ec49b3f1c8e4a8f8b8d2
             */
            readonly id: string;
            /**
             * @description Version name/label
             * @example v1.0
             */
            readonly name: string;
            /**
             * @description Description of the version
             * @example First release of the course
             */
            readonly description: string;
            /**
             * Format: Mongo Object ID
             * @description ID of the course this version belongs to
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            readonly courseId: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2023-10-01T12:00:00Z
             */
            readonly createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2023-10-01T12:00:00Z
             */
            readonly updatedAt: string;
        };
        CourseVersionNotFoundErrorResponse: {
            /**
             * @description HTTP status code
             * @example 404
             */
            readonly statusCode: number;
            /**
             * @description Error message
             * @example Course version not found
             */
            readonly message: string;
            /**
             * @description Error type
             * @example Not Found
             */
            readonly error: string;
        };
        CreateCourseVersionResponse: {
            /** @description The updated course object */
            readonly course: Record<string, never>;
            /** @description The created version object */
            readonly version: Record<string, never>;
        };
        CreateModuleBody: {
            /**
             * Module Name
             * @description Name/title of the module
             * @example Introduction to Data Structures
             */
            name: string;
            /**
             * Module Description
             * @description Detailed description of the module content
             * @example This module covers fundamental data structures including arrays, linked lists, stacks, and queues.
             */
            description: string;
            /**
             * After Module ID
             * Format: Mongo Object ID
             * @description Optional: Position the new module after this module ID
             * @example 60d5ec49b3f1c8e4a8f8b8c3
             */
            afterModuleId?: string;
            /**
             * Before Module ID
             * Format: Mongo Object ID
             * @description Optional: Position the new module before this module ID
             * @example 60d5ec49b3f1c8e4a8f8b8c4
             */
            beforeModuleId?: string;
        };
        UpdateModuleBody: {
            /**
             * Module Name
             * @description Updated name of the module
             * @example Advanced Data Structures
             */
            name?: string;
            /**
             * Module Description
             * @description Updated description of the module content
             * @example This module covers advanced data structures including trees, graphs, and hash tables.
             */
            description?: string;
            /**
             * @deprecated
             * @description [READONLY] This is a virtual field used only for validation. Do not include this field in requests.
             *     Either "name" or "description" must be provided.
             */
            readonly nameOrDescription?: string;
        };
        MoveModuleBody: {
            /**
             * After Module ID
             * Format: Mongo Object ID
             * @description Move the module after this module ID
             * @example 60d5ec49b3f1c8e4a8f8b8c3
             */
            afterModuleId?: string;
            /**
             * Before Module ID
             * Format: Mongo Object ID
             * @description Move the module before this module ID
             * @example 60d5ec49b3f1c8e4a8f8b8c4
             */
            beforeModuleId?: string;
            /**
             * @deprecated
             * @description [READONLY] Validation helper. Either afterModuleId or beforeModuleId must be provided.
             */
            readonly onlyOneAllowed?: string;
            /**
             * @deprecated
             * @description [READONLY] Validation helper. Both afterModuleId and beforeModuleId should not be provided together.
             */
            readonly bothNotAllowed?: string;
        };
        CreateModuleParams: {
            /**
             * Version ID
             * Format: Mongo Object ID
             * @description ID of the course version to which the module will be added
             * @example 60d5ec49b3f1c8e4a8f8b8d5
             */
            versionId: string;
        };
        UpdateModuleParams: {
            /**
             * Version ID
             * Format: Mongo Object ID
             * @description ID of the course version containing the module
             * @example 60d5ec49b3f1c8e4a8f8b8d5
             */
            versionId: string;
            /**
             * Module ID
             * Format: Mongo Object ID
             * @description ID of the module to be updated
             * @example 60d5ec49b3f1c8e4a8f8b8e6
             */
            moduleId: string;
        };
        MoveModuleParams: {
            /**
             * Version ID
             * Format: Mongo Object ID
             * @description ID of the course version containing the module
             * @example 60d5ec49b3f1c8e4a8f8b8d5
             */
            versionId: string;
            /**
             * Module ID
             * Format: Mongo Object ID
             * @description ID of the module to move
             * @example 60d5ec49b3f1c8e4a8f8b8e6
             */
            moduleId: string;
        };
        DeleteModuleParams: {
            /**
             * Version ID
             * Format: Mongo Object ID
             * @description ID of the course version containing the module
             * @example 60d5ec49b3f1c8e4a8f8b8d5
             */
            versionId: string;
            /**
             * Module ID
             * Format: Mongo Object ID
             * @description ID of the module to delete
             * @example 60d5ec49b3f1c8e4a8f8b8e6
             */
            moduleId: string;
        };
        ModuleDataResponse: {
            /** @description The updated course version data containing modules */
            readonly version: Record<string, never>;
        };
        ModuleNotFoundErrorResponse: {
            /**
             * @description The error message
             * @example No module found with the specified ID. Please verify the ID and try again.
             */
            readonly message: string;
        };
        ModuleDeletedResponse: {
            /**
             * @description Deletion confirmation message
             * @example Module with the ID 60d5ec49b3f1c8e4a8f8b8e6 in Version 60d5ec49b3f1c8e4a8f8b8d5 has been deleted successfully.
             */
            readonly message: string;
        };
        CreateSectionBody: {
            /**
             * Section Name
             * @description Name/title of the section
             * @example Introduction to Algorithms
             */
            name: string;
            /**
             * Section Description
             * @description Description or purpose of the section
             * @example This section covers fundamental algorithmic concepts including time complexity and space complexity.
             */
            description: string;
            /**
             * After Section ID
             * Format: Mongo Object ID
             * @description Optional: Place the new section after this section ID
             * @example 60d5ec49b3f1c8e4a8f8b8c3
             */
            afterSectionId?: string;
            /**
             * Before Section ID
             * Format: Mongo Object ID
             * @description Optional: Place the new section before this section ID
             * @example 60d5ec49b3f1c8e4a8f8b8c4
             */
            beforeSectionId?: string;
        };
        UpdateSectionBody: {
            /**
             * Section Name
             * @description Updated name of the section
             * @example Advanced Algorithms
             */
            name?: string;
            /**
             * Section Description
             * @description Updated description of the section
             * @example This section covers advanced algorithmic concepts including dynamic programming and greedy algorithms.
             */
            description?: string;
            /**
             * @deprecated
             * @description [READONLY] This is a virtual field used only for validation. Do not include this field in requests.
             *     Either "name" or "description" must be provided.
             */
            readonly nameOrDescription?: string;
        };
        MoveSectionBody: {
            /**
             * After Section ID
             * Format: Mongo Object ID
             * @description Move the section after this section ID
             * @example 60d5ec49b3f1c8e4a8f8b8c3
             */
            afterSectionId?: string;
            /**
             * Before Section ID
             * Format: Mongo Object ID
             * @description Move the section before this section ID
             * @example 60d5ec49b3f1c8e4a8f8b8c4
             */
            beforeSectionId?: string;
            /**
             * @deprecated
             * @description [READONLY] Validation helper. Either afterSectionId or beforeSectionId must be provided.
             */
            readonly onlyOneAllowed?: string;
            /**
             * @deprecated
             * @description [READONLY] Validation helper. Both afterSectionId and beforeSectionId should not be provided together.
             */
            readonly bothNotAllowed?: string;
        };
        CreateSectionParams: {
            /**
             * Version ID
             * Format: Mongo Object ID
             * @description ID of the course version to which the module belongs
             * @example 60d5ec49b3f1c8e4a8f8b8d5
             */
            versionId: string;
            /**
             * Module ID
             * Format: Mongo Object ID
             * @description ID of the module where the new section will be added
             * @example 60d5ec49b3f1c8e4a8f8b8e6
             */
            moduleId: string;
        };
        MoveSectionParams: {
            /**
             * Version ID
             * Format: Mongo Object ID
             * @description ID of the course version containing the module
             * @example 60d5ec49b3f1c8e4a8f8b8d5
             */
            versionId: string;
            /**
             * Module ID
             * Format: Mongo Object ID
             * @description ID of the module containing the section
             * @example 60d5ec49b3f1c8e4a8f8b8e6
             */
            moduleId: string;
            /**
             * Section ID
             * Format: Mongo Object ID
             * @description ID of the section to be moved
             * @example 60d5ec49b3f1c8e4a8f8b8f7
             */
            sectionId: string;
        };
        UpdateSectionParams: {
            /**
             * Version ID
             * Format: Mongo Object ID
             * @description ID of the course version containing the module
             * @example 60d5ec49b3f1c8e4a8f8b8d5
             */
            versionId: string;
            /**
             * Module ID
             * Format: Mongo Object ID
             * @description ID of the module containing the section
             * @example 60d5ec49b3f1c8e4a8f8b8e6
             */
            moduleId: string;
            /**
             * Section ID
             * Format: Mongo Object ID
             * @description ID of the section to be updated
             * @example 60d5ec49b3f1c8e4a8f8b8f7
             */
            sectionId: string;
        };
        SectionDataResponse: {
            /** @description The updated course version data containing the section */
            readonly version: Record<string, never>;
        };
        SectionNotFoundErrorResponse: {
            /**
             * @description The error message
             * @example No section found with the specified ID. Please verify the ID and try again.
             */
            readonly message: string;
        };
        SectionDeletedResponse: {
            /**
             * @description Deletion confirmation message
             * @example Section with the ID 60d5ec49b3f1c8e4a8f8b8e6 in Version 60d5ec49b3f1c8e4a8f8b8d5 has been deleted successfully.
             */
            readonly message: string;
        };
        DeleteSectionParams: {
            /**
             * Version ID
             * Format: Mongo Object ID
             * @description ID of the course version containing the module
             * @example 60d5ec49b3f1c8e4a8f8b8d5
             */
            versionId: string;
            /**
             * Module ID
             * Format: Mongo Object ID
             * @description ID of the module to delete
             * @example 60d5ec49b3f1c8e4a8f8b8e6
             */
            moduleId: string;
            /**
             * Section ID
             * Format: Mongo Object ID
             * @description ID of the section to delete
             * @example 60d5ec49b3f1c8e4a8f8b8e6
             */
            sectionId: string;
        };
        VideoDetailsPayloadValidator: {
            /**
             * Video URL
             * Format: uri
             * @description Public video URL (e.g., YouTube or Vimeo link)
             * @example https://www.youtube.com/watch?v=dQw4w9WgXcQ
             */
            URL: string;
            /**
             * Start Time
             * @description Start time of the video clip in HH:MM:SS format
             * @example 00:01:30
             */
            startTime: string;
            /**
             * End Time
             * @description End time of the video clip in HH:MM:SS format
             * @example 00:10:15
             */
            endTime: string;
            /**
             * Video Points
             * @description Points assigned to the video interaction
             * @example 10
             */
            points: number;
        };
        QuizDetailsPayloadValidator: {
            /**
             * Pass Threshold
             * @description Minimum percentage required to pass, between 0 and 1
             * @example 0.7
             */
            passThreshold: number;
            /**
             * Maximum Attempts
             * @description Maximum number of attempts allowed for the quiz, -1 for unlimited
             * @example 3
             */
            maxAttempts: number;
            /**
             * Quiz Type
             * @description Type of quiz: DEADLINE or NO_DEADLINE
             * @example DEADLINE
             * @enum {string}
             */
            quizType: "DEADLINE" | "NO_DEADLINE";
            /**
             * Approximate Time to Complete
             * @description Approximate time to complete the quiz in HH:MM:SS format
             * @example 00:30:00
             */
            approximateTimeToComplete: string;
            /**
             * Allow Partial Grading
             * @description Whether to allow partial grading for questions, particularly for MSQ/SML type of questions.
             * @example true
             */
            allowPartialGrading: boolean;
            /**
             * Allow Hint
             * @description Whether to allow students to see the hints for questions
             * @example true
             */
            allowHint: boolean;
            /**
             * Show Correct Answers After Submission
             * @description Whether to return and show correct answers after successful submission of an attempt
             * @example true
             */
            showCorrectAnswersAfterSubmission: boolean;
            /**
             * Show Explanation After Submission
             * @description Whether to return and show explanations for correct answers after successful submission of an attempt
             * @example true
             */
            showExplanationAfterSubmission: boolean;
            /**
             * Show Score After Submission
             * @description Whether to return and show score after successful submission of an attempt
             * @example true
             */
            showScoreAfterSubmission: boolean;
            /**
             * Question Visibility
             * @description Number of quiz questions visible to students in an attempt
             * @example 5
             */
            questionVisibility: number;
            /**
             * Quiz Release Time
             * Format: date-time
             * @description ISO date string representing quiz release time
             * @example 2023-10-15T14:00:00Z
             */
            releaseTime: string;
            /**
             * Quiz Deadline
             * Format: date-time
             * @description ISO date string for quiz deadline
             * @example 2023-10-22T23:59:59Z
             */
            deadline?: string;
        };
        BlogDetailsPayloadValidator: {
            /**
             * Blog Tags
             * @description Tags for categorizing the blog (auto-managed)
             * @example [
             *       "programming",
             *       "algorithms"
             *     ]
             */
            readonly tags?: string[] | "" | unknown;
            /**
             * Blog Content
             * @description Full blog content in markdown or plain text
             * @example # Introduction
             *
             *     This is a sample blog post about programming...
             */
            content: string;
            /**
             * Blog Points
             * @description Points assigned to the blog submission
             * @example 20
             */
            points: number;
            /**
             * Estimated Read Time
             * @description Estimated time to complete reading the blog in minutes
             * @example 15
             */
            estimatedReadTimeInMinutes: number;
        };
        CreateItemBody: {
            /**
             * Item Name
             * @description Title of the item
             * @example Introduction to Data Structures
             */
            name: string;
            /**
             * Item Description
             * @description Description of the item
             * @example Learn about basic data structures like arrays, linked lists, and stacks.
             */
            description: string;
            /**
             * After Item ID
             * Format: Mongo Object ID
             * @description Place item after this item ID
             * @example 60d5ec49b3f1c8e4a8f8b8c3
             */
            afterItemId?: string;
            /**
             * Before Item ID
             * Format: Mongo Object ID
             * @description Place item before this item ID
             * @example 60d5ec49b3f1c8e4a8f8b8c4
             */
            beforeItemId?: string;
            /**
             * Item Type
             * @description Type of the item: VIDEO, BLOG, or QUIZ
             * @example VIDEO
             * @enum {string}
             */
            type: "VIDEO" | "QUIZ" | "BLOG";
            /**
             * Video Details
             * @description Details specific to video items
             */
            videoDetails?: components["schemas"]["VideoDetailsPayloadValidator"];
            /**
             * Blog Details
             * @description Details specific to blog items
             */
            blogDetails?: components["schemas"]["BlogDetailsPayloadValidator"];
            /**
             * Quiz Details
             * @description Details specific to quiz items
             */
            quizDetails?: components["schemas"]["QuizDetailsPayloadValidator"];
        };
        UpdateItemBody: {
            /**
             * Item Name
             * @description Updated title of the item
             * @example Advanced Data Structures
             */
            name?: string;
            /**
             * Item Description
             * @description Updated description of the item
             * @example Learn about advanced data structures like trees, graphs, and hash tables.
             */
            description?: string;
            /**
             * Item Order
             * @description Order key for item placement (auto-managed)
             * @example a1b2c3
             */
            readonly order?: string | "" | unknown;
            /**
             * Item Details
             * @description Item details (depends on type) – video, blog, or quiz
             */
            readonly itemDetails?: "" | unknown;
            /**
             * Created At
             * Format: date-time
             * @description Item creation timestamp (auto-managed)
             * @example 2023-10-01T12:00:00Z
             */
            readonly createdAt?: string | "" | unknown;
            /**
             * Updated At
             * Format: date-time
             * @description Item update timestamp (auto-managed)
             * @example 2023-10-05T15:30:00Z
             */
            readonly updatedAt?: string | "" | unknown;
            /**
             * Item Type
             * @description Updated type of the item: VIDEO, BLOG, or QUIZ
             * @example BLOG
             * @enum {string}
             */
            type?: "VIDEO" | "QUIZ" | "BLOG";
            /**
             * After Item ID
             * Format: Mongo Object ID
             * @description Place item after this item ID
             * @example 60d5ec49b3f1c8e4a8f8b8c3
             */
            afterItemId?: string;
            /**
             * Before Item ID
             * Format: Mongo Object ID
             * @description Place item before this item ID
             * @example 60d5ec49b3f1c8e4a8f8b8c4
             */
            beforeItemId?: string;
            /**
             * Video Details
             * @description Updated details specific to video items
             */
            videoDetails?: components["schemas"]["VideoDetailsPayloadValidator"];
            /**
             * Blog Details
             * @description Updated details specific to blog items
             */
            blogDetails?: components["schemas"]["BlogDetailsPayloadValidator"];
            /**
             * Quiz Details
             * @description Updated details specific to quiz items
             */
            quizDetails?: components["schemas"]["QuizDetailsPayloadValidator"];
        };
        MoveItemBody: {
            /**
             * After Item ID
             * Format: Mongo Object ID
             * @description Move the item after this item ID
             * @example 60d5ec49b3f1c8e4a8f8b8c3
             */
            afterItemId?: string;
            /**
             * Before Item ID
             * Format: Mongo Object ID
             * @description Move the item before this item ID
             * @example 60d5ec49b3f1c8e4a8f8b8c4
             */
            beforeItemId?: string;
            /**
             * @deprecated
             * @description [READONLY] Validation helper. Either afterItemId or beforeItemId must be provided.
             */
            readonly onlyOneAllowed?: string;
            /**
             * @deprecated
             * @description [READONLY] Validation helper. Both afterItemId and beforeItemId should not be provided together.
             */
            readonly bothNotAllowed?: string;
        };
        CreateItemParams: {
            /**
             * Version ID
             * Format: Mongo Object ID
             * @description ID of the course version
             * @example 60d5ec49b3f1c8e4a8f8b8d5
             */
            versionId: string;
            /**
             * Module ID
             * Format: Mongo Object ID
             * @description ID of the module inside the version
             * @example 60d5ec49b3f1c8e4a8f8b8e6
             */
            moduleId: string;
            /**
             * Section ID
             * Format: Mongo Object ID
             * @description ID of the section inside the module
             * @example 60d5ec49b3f1c8e4a8f8b8f7
             */
            sectionId: string;
        };
        ReadAllItemsParams: {
            /**
             * Version ID
             * Format: Mongo Object ID
             * @description ID of the course version containing the items
             * @example 60d5ec49b3f1c8e4a8f8b8d5
             */
            versionId: string;
            /**
             * Module ID
             * Format: Mongo Object ID
             * @description ID of the module containing the section
             * @example 60d5ec49b3f1c8e4a8f8b8e6
             */
            moduleId: string;
            /**
             * Section ID
             * Format: Mongo Object ID
             * @description ID of the section containing the items
             * @example 60d5ec49b3f1c8e4a8f8b8f7
             */
            sectionId: string;
        };
        UpdateItemParams: {
            /**
             * Version ID
             * Format: Mongo Object ID
             * @description ID of the course version containing the item
             * @example 60d5ec49b3f1c8e4a8f8b8d5
             */
            versionId: string;
            /**
             * Module ID
             * Format: Mongo Object ID
             * @description ID of the module containing the section
             * @example 60d5ec49b3f1c8e4a8f8b8e6
             */
            moduleId: string;
            /**
             * Section ID
             * Format: Mongo Object ID
             * @description ID of the section containing the item
             * @example 60d5ec49b3f1c8e4a8f8b8f7
             */
            sectionId: string;
            /**
             * Item ID
             * Format: Mongo Object ID
             * @description ID of the item to be updated
             * @example 60d5ec49b3f1c8e4a8f8b8f8
             */
            itemId: string;
        };
        MoveItemParams: {
            /**
             * Version ID
             * Format: Mongo Object ID
             * @description ID of the course version containing the item
             * @example 60d5ec49b3f1c8e4a8f8b8d5
             */
            versionId: string;
            /**
             * Module ID
             * Format: Mongo Object ID
             * @description ID of the module containing the section
             * @example 60d5ec49b3f1c8e4a8f8b8e6
             */
            moduleId: string;
            /**
             * Section ID
             * Format: Mongo Object ID
             * @description ID of the section containing the item
             * @example 60d5ec49b3f1c8e4a8f8b8f7
             */
            sectionId: string;
            /**
             * Item ID
             * Format: Mongo Object ID
             * @description ID of the item to be moved
             * @example 60d5ec49b3f1c8e4a8f8b8f8
             */
            itemId: string;
        };
        DeleteItemParams: {
            /**
             * Items Group ID
             * Format: Mongo Object ID
             * @description ID of the items group containing the item
             * @example 60d5ec49b3f1c8e4a8f8b8g9
             */
            itemsGroupId: string;
            /**
             * Item ID
             * Format: Mongo Object ID
             * @description ID of the item to delete
             * @example 60d5ec49b3f1c8e4a8f8b8f8
             */
            itemId: string;
        };
        ItemNotFoundErrorResponse: {
            /**
             * @description The error message
             * @example No item found with the specified ID. Please verify the ID and try again.
             */
            readonly message: string;
        };
        ItemDataResponse: {
            /** @description The item data */
            readonly itemsGroup: Record<string, never>;
            /** @description The updated version data (when applicable) */
            readonly version?: Record<string, never>;
        };
        DeletedItemResponse: {
            /** @description The deleted item data */
            readonly deletedItem: Record<string, never>;
            /** @description The updated items group after deletion */
            readonly updatedItemsGroup: Record<string, never>;
        };
        ReadItemParams: {
            /**
             * Version ID
             * Format: Mongo Object ID
             * @description ID of the course version containing the item
             * @example 60d5ec49b3f1c8e4a8f8b8d5
             */
            versionId: string;
            /**
             * Module ID
             * Format: Mongo Object ID
             * @description ID of the module containing the section
             * @example 60d5ec49b3f1c8e4a8f8b8e6
             */
            moduleId: string;
            /**
             * Section ID
             * Format: Mongo Object ID
             * @description ID of the section containing the item
             * @example 60d5ec49b3f1c8e4a8f8b8f7
             */
            sectionId: string;
            /**
             * Item ID
             * Format: Mongo Object ID
             * @description ID of the item to be retrieved
             * @example 60d5ec49b3f1c8e4a8f8b8f8
             */
            itemId: string;
        };
        GetUserProgressParams: {
            /**
             * Format: Mongo Object ID
             * @description User ID to retrieve progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            userId: string;
            /**
             * Format: Mongo Object ID
             * @description Course ID to retrieve progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c2
             */
            courseId: string;
            /**
             * Format: Mongo Object ID
             * @description Course version ID to retrieve progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c3
             */
            courseVersionId: string;
        };
        StartItemBody: {
            /**
             * Format: Mongo Object ID
             * @description ID of the course item to start
             * @example 60d5ec49b3f1c8e4a8f8b8c4
             */
            itemId: string;
            /**
             * Format: Mongo Object ID
             * @description ID of the module containing the item
             * @example 60d5ec49b3f1c8e4a8f8b8c5
             */
            moduleId: string;
            /**
             * Format: Mongo Object ID
             * @description ID of the section containing the item
             * @example 60d5ec49b3f1c8e4a8f8b8c6
             */
            sectionId: string;
        };
        StartItemParams: {
            /**
             * Format: Mongo Object ID
             * @description User ID to track progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            userId: string;
            /**
             * Format: Mongo Object ID
             * @description Course ID to track progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c2
             */
            courseId: string;
            /**
             * Format: Mongo Object ID
             * @description Course version ID to track progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c3
             */
            courseVersionId: string;
        };
        StartItemResponse: {
            /**
             * Format: Mongo Object ID
             * @description Watch item ID for tracking progress
             * @example 60d5ec49b3f1c8e4a8f8b8c7
             */
            watchItemId: string;
        };
        StopItemParams: {
            /**
             * Format: Mongo Object ID
             * @description User ID to stop tracking progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            userId: string;
            /**
             * Format: Mongo Object ID
             * @description Course ID to stop tracking progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c2
             */
            courseId: string;
            /**
             * Format: Mongo Object ID
             * @description Course version ID to stop tracking progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c3
             */
            courseVersionId: string;
        };
        StopItemBody: {
            /**
             * Format: Mongo Object ID
             * @description Watch item ID used for tracking progress
             * @example 60d5ec49b3f1c8e4a8f8b8c7
             */
            watchItemId: string;
            /**
             * Format: Mongo Object ID
             * @description ID of the course item to stop tracking
             * @example 60d5ec49b3f1c8e4a8f8b8c4
             */
            itemId: string;
            /**
             * Format: Mongo Object ID
             * @description ID of the section containing the item
             * @example 60d5ec49b3f1c8e4a8f8b8c6
             */
            sectionId: string;
            /**
             * Format: Mongo Object ID
             * @description ID of the module containing the item
             * @example 60d5ec49b3f1c8e4a8f8b8c5
             */
            moduleId: string;
            attemptId?: string | null;
        };
        UpdateProgressBody: {
            /**
             * Format: Mongo Object ID
             * @description ID of the module to update progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c5
             */
            moduleId: string;
            /**
             * Format: Mongo Object ID
             * @description ID of the section to update progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c6
             */
            sectionId: string;
            /**
             * Format: Mongo Object ID
             * @description ID of the item to update progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c4
             */
            itemId: string;
            /**
             * Format: Mongo Object ID
             * @description Watch item ID used for tracking progress
             * @example 60d5ec49b3f1c8e4a8f8b8c7
             */
            watchItemId?: string | null;
            /**
             * Format: Mongo Object ID
             * @description Attempt ID used for quiz tracking progress
             * @example 60d5ec49b3f1c8e4a8f8b8c7
             */
            attemptId?: string | null;
        };
        UpdateProgressParams: {
            /**
             * Format: Mongo Object ID
             * @description User ID to update progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            userId: string;
            /**
             * Format: Mongo Object ID
             * @description Course ID to update progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c2
             */
            courseId: string;
            /**
             * Format: Mongo Object ID
             * @description Course version ID to update progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c3
             */
            courseVersionId: string;
        };
        ResetCourseProgressParams: {
            /**
             * Format: Mongo Object ID
             * @description User ID to reset progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            userId: string;
            /**
             * Format: Mongo Object ID
             * @description Course ID to reset progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c2
             */
            courseId: string;
            /**
             * Format: Mongo Object ID
             * @description Course version ID to reset progress for
             * @example 60d5ec49b3f1c8e4a8f8b8c3
             */
            courseVersionId: string;
        };
        ResetCourseProgressBody: {
            /**
             * Format: Mongo Object ID
             * @description Optional module ID to reset progress to
             * @example 60d5ec49b3f1c8e4a8f8b8c5
             */
            moduleId?: string | null;
            /**
             * Format: Mongo Object ID
             * @description Optional section ID to reset progress to
             * @example 60d5ec49b3f1c8e4a8f8b8c6
             */
            sectionId?: string | null;
            /**
             * Format: Mongo Object ID
             * @description Optional item ID to reset progress to
             * @example 60d5ec49b3f1c8e4a8f8b8c4
             */
            itemId?: string | null;
            invalidFieldsCheck?: unknown;
            invalidFieldsCheck2?: unknown;
        };
        ProgressDataResponse: {
            /**
             * Format: Mongo Object ID
             * @description Unique identifier for the progress record
             * @example 60d5ec49b3f1c8e4a8f8b8d1
             */
            readonly _id: string;
            /**
             * Format: Mongo Object ID
             * @description User ID associated with this progress
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            userId: string;
            /**
             * Format: Mongo Object ID
             * @description Course ID associated with this progress
             * @example 60d5ec49b3f1c8e4a8f8b8c2
             */
            courseId: string;
            /**
             * Format: Mongo Object ID
             * @description Course version ID associated with this progress
             * @example 60d5ec49b3f1c8e4a8f8b8c3
             */
            courseVersionId: string;
            /**
             * Format: Mongo Object ID
             * @description ID of the current module in progress
             * @example 60d5ec49b3f1c8e4a8f8b8c5
             */
            currentModule: string;
            /**
             * Format: Mongo Object ID
             * @description ID of the current section in progress
             * @example 60d5ec49b3f1c8e4a8f8b8c6
             */
            currentSection: string;
            /**
             * Format: Mongo Object ID
             * @description ID of the current item in progress
             * @example 60d5ec49b3f1c8e4a8f8b8c4
             */
            currentItem: string;
            /**
             * @description Whether the course has been completed
             * @example false
             */
            completed: boolean;
        };
        EnrollmentParams: {
            /**
             * Format: Mongo Object ID
             * @description User ID of the student to enroll
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            userId: string;
            /**
             * Format: Mongo Object ID
             * @description ID of the course to enroll in
             * @example 60d5ec49b3f1c8e4a8f8b8c2
             */
            courseId: string;
            /**
             * Format: Mongo Object ID
             * @description ID of the specific course version to enroll in
             * @example 60d5ec49b3f1c8e4a8f8b8c3
             */
            courseVersionId: string;
        };
        EnrollmentDataResponse: {
            /**
             * Format: Mongo Object ID
             * @description Unique identifier for the enrollment record
             * @example 60d5ec49b3f1c8e4a8f8b8d2
             */
            readonly _id: string;
            /**
             * Format: Mongo Object ID
             * @description User ID associated with this enrollment
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            userId: string;
            /**
             * Format: Mongo Object ID
             * @description Course ID associated with this enrollment
             * @example 60d5ec49b3f1c8e4a8f8b8c2
             */
            courseId: string;
            /**
             * Format: Mongo Object ID
             * @description Course version ID associated with this enrollment
             * @example 60d5ec49b3f1c8e4a8f8b8c3
             */
            courseVersionId: string;
            /**
             * @description Status of the enrollment
             * @example active
             * @enum {string}
             */
            status: "active" | "inactive";
            /**
             * Format: date-time
             * @description Date when the user was enrolled
             * @example 2023-10-01T12:00:00Z
             */
            enrollmentDate: string;
        };
        EnrollUserResponseData: {
            /** @description Enrollment data for the user */
            enrollment: Record<string, never>;
            /** @description Progress data for the user */
            progress: Record<string, never>;
        };
        EnrollmentResponse: {
            totalDocuments: number;
            totalPages: number;
            currentPage: number;
            enrollments: Record<string, never>[];
        };
        EnrollmentNotFoundErrorResponse: {
            /**
             * @description Error message indicating the enrollment was not found
             * @example Enrollment could not be created or found.
             */
            message: string;
        };
        UserByFirebaseUIDParams: {
            /**
             * @description Firebase UID of the user to find
             * @example cKy6H2O04PgTh8O3DpUXjgJYUr53
             */
            firebaseUID: string;
        };
        UserByFirebaseUIDResponse: {
            /**
             * @description Unique identifier for the user in the database
             * @example 60d5ec49b3f1c8e4a8f8b8c1
             */
            readonly id: string;
            /**
             * @description Firebase UID of the user
             * @example cKy6H2O04PgTh8O3DpUXjgJYUr53
             */
            readonly firebaseUID: string;
            /**
             * Format: email
             * @description Email address of the user
             * @example user@example.com
             */
            readonly email: string;
            /**
             * @description User's first name
             * @example John
             */
            readonly firstName: string;
            /**
             * @description User's last name
             * @example Smith
             */
            readonly lastName: string;
        };
        UserNotFoundErrorResponse: {
            /**
             * @description Error message indicating user was not found
             * @example User not found with the provided Firebase UID
             */
            readonly message: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "AuthController.signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description SignUpBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SignUpBody"];
            };
        };
        responses: {
            /** @description User successfully registered */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignUpResponse"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Registration failed */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthErrorResponse"];
                };
            };
        };
    };
    "AuthController.verifySignUpProvider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description VerifySignUpProviderBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["VerifySignUpProviderBody"];
            };
        };
        responses: {
            /** @description User successfully verified */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignUpResponse"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Registration failed */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthErrorResponse"];
                };
            };
        };
    };
    "AuthController.changePassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ChangePasswordBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChangePasswordBody"];
            };
        };
        responses: {
            /** @description Password changed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChangePasswordResponse"];
                };
            };
            /** @description Invalid password format or mismatch */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Password change failed */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthErrorResponse"];
                };
            };
        };
    };
    "AuthController.verifyToken": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Token verification successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenVerificationResponse"];
                };
            };
            /** @description Invalid or expired token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthErrorResponse"];
                };
            };
        };
    };
    "CourseController.create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description CreateCourseBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateCourseBody"];
            };
        };
        responses: {
            /** @description Course created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
        };
    };
    "CourseController.read": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Course not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseNotFoundErrorResponse"];
                };
            };
        };
    };
    "CourseController.update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description UpdateCourseBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateCourseBody"];
            };
        };
        responses: {
            /** @description Course updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Course not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseNotFoundErrorResponse"];
                };
            };
        };
    };
    "CourseVersionController.create": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description CreateCourseVersionBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateCourseVersionBody"];
            };
        };
        responses: {
            /** @description Course version created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateCourseVersionResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Course not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseVersionNotFoundErrorResponse"];
                };
            };
        };
    };
    "CourseVersionController.read": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course version retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseVersionDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Course version not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseVersionNotFoundErrorResponse"];
                };
            };
        };
    };
    "CourseVersionController.delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                versionId: string;
                courseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course version deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteCourseVersionParams"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Course or version not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseVersionNotFoundErrorResponse"];
                };
            };
        };
    };
    "ModuleController.create": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                versionId: string;
            };
            cookie?: never;
        };
        /** @description CreateModuleBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateModuleBody"];
            };
        };
        responses: {
            /** @description Module created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModuleDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Module not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModuleNotFoundErrorResponse"];
                };
            };
        };
    };
    "ModuleController.update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                versionId: string;
                moduleId: string;
            };
            cookie?: never;
        };
        /** @description UpdateModuleBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateModuleBody"];
            };
        };
        responses: {
            /** @description Module updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModuleDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Module not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModuleNotFoundErrorResponse"];
                };
            };
        };
    };
    "ModuleController.delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                versionId: string;
                moduleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Module deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModuleDeletedResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Module not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModuleNotFoundErrorResponse"];
                };
            };
        };
    };
    "ModuleController.move": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                versionId: string;
                moduleId: string;
            };
            cookie?: never;
        };
        /** @description MoveModuleBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MoveModuleBody"];
            };
        };
        responses: {
            /** @description Module moved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModuleDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Module not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModuleNotFoundErrorResponse"];
                };
            };
        };
    };
    "SectionController.create": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                versionId: string;
                moduleId: string;
            };
            cookie?: never;
        };
        /** @description CreateSectionBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateSectionBody"];
            };
        };
        responses: {
            /** @description Section created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Section not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionNotFoundErrorResponse"];
                };
            };
        };
    };
    "SectionController.update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                versionId: string;
                moduleId: string;
                sectionId: string;
            };
            cookie?: never;
        };
        /** @description UpdateSectionBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateSectionBody"];
            };
        };
        responses: {
            /** @description Section updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Section not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionNotFoundErrorResponse"];
                };
            };
        };
    };
    "SectionController.delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                versionId: string;
                moduleId: string;
                sectionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Section deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionDeletedResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Section not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionNotFoundErrorResponse"];
                };
            };
        };
    };
    "SectionController.move": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                versionId: string;
                moduleId: string;
                sectionId: string;
            };
            cookie?: never;
        };
        /** @description MoveSectionBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MoveSectionBody"];
            };
        };
        responses: {
            /** @description Section moved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Section not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionNotFoundErrorResponse"];
                };
            };
        };
    };
    "ItemController.readAll": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                versionId: string;
                moduleId: string;
                sectionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Items retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemNotFoundErrorResponse"];
                };
            };
        };
    };
    "ItemController.create": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                versionId: string;
                moduleId: string;
                sectionId: string;
            };
            cookie?: never;
        };
        /** @description CreateItemBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateItemBody"];
            };
        };
        responses: {
            /** @description Item created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemNotFoundErrorResponse"];
                };
            };
        };
    };
    "ItemController.readItem": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                versionId: string;
                moduleId: string;
                sectionId: string;
                itemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Item retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemNotFoundErrorResponse"];
                };
            };
        };
    };
    "ItemController.update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                versionId: string;
                moduleId: string;
                sectionId: string;
                itemId: string;
            };
            cookie?: never;
        };
        /** @description UpdateItemBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateItemBody"];
            };
        };
        responses: {
            /** @description Item updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemNotFoundErrorResponse"];
                };
            };
        };
    };
    "ItemController.delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemsGroupId: string;
                itemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Item deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeletedItemResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemNotFoundErrorResponse"];
                };
            };
        };
    };
    "ItemController.move": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                versionId: string;
                moduleId: string;
                sectionId: string;
                itemId: string;
            };
            cookie?: never;
        };
        /** @description MoveItemBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MoveItemBody"];
            };
        };
        responses: {
            /** @description Item moved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemNotFoundErrorResponse"];
                };
            };
        };
    };
    "EnrollmentController.enrollUser": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
                courseId: string;
                courseVersionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User successfully enrolled in the course */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnrollUserResponseData"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Enrollment could not be created or found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnrollmentNotFoundErrorResponse"];
                };
            };
        };
    };
    "EnrollmentController.unenrollUser": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
                courseId: string;
                courseVersionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User successfully unenrolled from the course */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnrollUserResponseData"] | components["schemas"]["EnrollUserResponseData"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"] | components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Enrollment could not be found or already removed */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnrollmentNotFoundErrorResponse"] | components["schemas"]["EnrollmentNotFoundErrorResponse"];
                };
            };
        };
    };
    "EnrollmentController.getUserEnrollments": {
        parameters: {
            query?: {
                page?: unknown;
                limit?: unknown;
            };
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of user enrollments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnrollmentResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description Enrollments Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnrollmentNotFoundErrorResponse"];
                };
            };
        };
    };
    "ProgressController.getUserProgress": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
                courseId: string;
                courseVersionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User progress retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProgressDataResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
        };
    };
    "ProgressController.startItem": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
                courseId: string;
                courseVersionId: string;
            };
            cookie?: never;
        };
        /** @description StartItemBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StartItemBody"];
            };
        };
        responses: {
            /** @description Course item started successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StartItemResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
        };
    };
    "ProgressController.stopItem": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
                courseId: string;
                courseVersionId: string;
            };
            cookie?: never;
        };
        /** @description StopItemBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StopItemBody"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
        };
    };
    "ProgressController.updateProgress": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
                courseId: string;
                courseVersionId: string;
            };
            cookie?: never;
        };
        /** @description UpdateProgressBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateProgressBody"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
        };
    };
    "ProgressController.resetProgress": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
                courseId: string;
                courseVersionId: string;
            };
            cookie?: never;
        };
        /** @description ResetCourseProgressBody */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ResetCourseProgressBody"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
        };
    };
    "UserController.getUserByFirebaseUID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                firebaseUID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User found successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserByFirebaseUIDResponse"];
                };
            };
            /** @description Bad Request Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorResponse"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserNotFoundErrorResponse"];
                };
            };
        };
    };
}
