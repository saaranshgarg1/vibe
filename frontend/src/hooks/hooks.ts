/*
This file is Exports hooks for OpenAPI endpoints using the api client.
It is most certain that this file is not bugged.
Do not edit this file manually.
*/

import { api } from '../lib/openapi';
import { components } from '../types/schema';
import { useState } from 'react';

import type { BufferId, LotItem, BaseQuestionRenderView, DescriptiveQuestionRenderView, SelectManyInLotQuestionRenderView, OrderTheLotsQuestionRenderView, NumericAnswerQuestionRenderView, SelectOneInLotQuestionRenderView, QuestionRenderView, SaveQuestion, IQuestionAnswerFeedback, SubmitQuizResponse } from '../types/quiz.types';
import type { ReportAnomalyBody, ReportAnomalyResponse } from '@/types/reportanomaly.types';
import type { ProctoringSettings } from '@/types/video.types';
import { InviteBody, InviteResponse, MessageResponse } from '@/types/invite.types';
import { updateProctoringSettings } from '@/app/pages/testing-proctoring/proctoring';

// Auth hooks

// POST /auth/verify
export function useLogin(): {
  data: components['schemas']['TokenVerificationResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("post", "/auth/verify", {});

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Login failed') : null,
    refetch: result.refetch
  };
}

// POST /auth/google
export function useLoginWithGoogle(): {
  mutate: (variables: { body: { lastName: string, firstName: string, email: string } }) => void,
  mutateAsync: (variables: { body: { lastName: string, firstName: string, email: string } }) => Promise<components['schemas']['SignUpResponse']>,
  data: components['schemas']['TokenVerificationResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/auth/google");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Google login failed') : null
  };
}

// POST /auth/signup
export function useSignup(): {
  mutate: (variables: { body: components['schemas']['SignUpBody'] }) => void,
  mutateAsync: (variables: { body: components['schemas']['SignUpBody'] }) => Promise<components['schemas']['SignUpResponse']>,
  data: components['schemas']['SignUpResponse'] | undefined,
  error: unknown | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/auth/signup");
  return {
    ...result,
    error: result.error ? (result.error) : null
  };
}

// POST /auth/signup/verify
export function useVerifySignUpProvider(): {
  mutate: (variables: { body: components['schemas']['VerifySignUpProviderBody'] }) => void,
  mutateAsync: (variables: { body: components['schemas']['VerifySignUpProviderBody'] }) => Promise<components['schemas']['SignUpResponse']>,
  data: components['schemas']['SignUpResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/auth/signup/verify");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Verification failed') : null
  };
}

// PATCH /auth/change-password
export function useChangePassword(): {
  mutate: (variables: { body: components['schemas']['ChangePasswordBody'] }) => void,
  mutateAsync: (variables: { body: components['schemas']['ChangePasswordBody'] }) => Promise<components['schemas']['ChangePasswordResponse']>,
  data: components['schemas']['ChangePasswordResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("patch", "/auth/change-password");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Password change failed') : null
  };
}

// Course hooks

// POST /courses/
export function useCreateCourse(): {
  mutate: (variables: { body: components['schemas']['CreateCourseBody'] }) => void,
  mutateAsync: (variables: { body: components['schemas']['CreateCourseBody'] }) => Promise<components['schemas']['CourseDataResponse']>,
  data: components['schemas']['CourseDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/courses/");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Course creation failed') : null
  };
}

// GET /courses/{id}
export function useCourseById(id: string): {
  data: components['schemas']['CourseDataResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/courses/{id}", {
    params: { path: { id } }
  }, { enabled: !!id });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch course') : null,
    refetch: result.refetch
  };
}

// PUT /courses/{id}
export function useUpdateCourse(): {
  mutate: (variables: { params: { path: { id: string } }, body: components['schemas']['UpdateCourseBody'] }) => void,
  mutateAsync: (variables: { params: { path: { id: string } }, body: components['schemas']['UpdateCourseBody'] }) => Promise<components['schemas']['CourseDataResponse']>,
  data: components['schemas']['CourseDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/{id}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Course update failed') : null
  };
}

// DELETE /courses/{id}
export function useDeleteCourse(): {
  mutate: (variables: { params: { path: { id: string } } }) => void,
  mutateAsync: (variables: { params: { path: { id: string } } }) => Promise<void>,
  data: void | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("delete", "/courses/{id}");

  return {
    mutate: result.mutate,
    mutateAsync: result.mutateAsync,
    data: result.data as void,
    isPending: result.isPending,
    isSuccess: result.isSuccess,
    isError: result.isError,
    isIdle: result.isIdle,
    reset: result.reset,
    status: result.status,
    error: result.error ? (result.error || 'Failed to delete course') : null
  };
}


// Course Version hooks

// POST /courses/{id}/versions
export function useCreateCourseVersion(): {
  mutate: (variables: { params: { path: { id: string } }, body: components['schemas']['CreateCourseVersionBody'] }) => void,
  mutateAsync: (variables: { params: { path: { id: string } }, body: components['schemas']['CreateCourseVersionBody'] }) => Promise<components['schemas']['CreateCourseVersionResponse']>,
  data: components['schemas']['CreateCourseVersionResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/courses/{id}/versions");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Course version creation failed') : null
  };
}

// GET /courses/versions/{id}
export function useCourseVersionById(id: string): {
  data: components['schemas']['CourseVersionDataResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/courses/versions/{id}", {
    params: { path: { id } }
  }, { enabled: !!id }
  );

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch course version') : null,
    refetch: result.refetch
  };
}

// DELETE /courses/{courseId}/versions/{versionId}
export function useDeleteCourseVersion(): {
  mutate: (variables: { params: { path: { courseId: string, versionId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { courseId: string, versionId: string } } }) => Promise<components['schemas']['DeleteCourseVersionParams']>,
  data: components['schemas']['DeleteCourseVersionParams'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("delete", "/courses/{courseId}/versions/{versionId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Course version deletion failed') : null
  };
}

// Module hooks

// POST /courses/versions/{versionId}/modules
export function useCreateModule(): {
  mutate: (variables: { params: { path: { versionId: string } }, body: components['schemas']['CreateModuleBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string } }, body: components['schemas']['CreateModuleBody'] }) => Promise<components['schemas']['ModuleDataResponse']>,
  data: components['schemas']['ModuleDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/courses/versions/{versionId}/modules");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Module creation failed') : null
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}
export function useUpdateModule(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['UpdateModuleBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['UpdateModuleBody'] }) => Promise<components['schemas']['ModuleDataResponse']>,
  data: components['schemas']['ModuleDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Module update failed') : null
  };
}

// DELETE /courses/versions/{versionId}/modules/{moduleId}
export function useDeleteModule(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string } } }) => Promise<components['schemas']['ModuleDeletedResponse']>,
  data: components['schemas']['ModuleDeletedResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("delete", "/courses/versions/{versionId}/modules/{moduleId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Module deletion failed') : null
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}/move
export function useMoveModule(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['MoveModuleBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['MoveModuleBody'] }) => Promise<components['schemas']['ModuleDataResponse']>,
  data: components['schemas']['ModuleDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}/move");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Module move failed') : null
  };
}

// Section hooks

// POST /courses/versions/{versionId}/modules/{moduleId}/sections
export function useCreateSection(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['CreateSectionBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['CreateSectionBody'] }) => Promise<components['schemas']['SectionDataResponse']>,
  data: components['schemas']['SectionDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/courses/versions/{versionId}/modules/{moduleId}/sections");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Section creation failed') : null
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}
export function useUpdateSection(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['UpdateSectionBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['UpdateSectionBody'] }) => Promise<components['schemas']['SectionDataResponse']>,
  data: components['schemas']['SectionDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Section update failed') : null
  };
}

// DELETE /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}
export function useDeleteSection(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } } }) => Promise<components['schemas']['SectionDeletedResponse']>,
  data: components['schemas']['SectionDeletedResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("delete", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Section deletion failed') : null
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/move
export function useMoveSection(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['MoveSectionBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['MoveSectionBody'] }) => Promise<components['schemas']['SectionDataResponse']>,
  data: components['schemas']['SectionDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/move");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Section move failed') : null
  };
}

// Item hooks

// GET /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items
export function useItemsBySectionId(versionId: string, moduleId: string, sectionId: string): {
  data: components['schemas']['ItemDataResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items", {
    params: { path: { versionId, moduleId, sectionId } }
  }, { enabled: !!versionId && !!moduleId && !!sectionId });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch items') : null,
    refetch: result.refetch
  };
}

// POST /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items
export function useCreateItem(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['CreateItemBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['CreateItemBody'] }) => Promise<components['schemas']['ItemDataResponse']>,
  data: components['schemas']['ItemDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Item creation failed') : null
  };
}

// GET /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}
export function useItemById(courseId: string, versionId: string, itemId: string): {
  data: components['schemas']['ItemDataResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/courses/{courseId}/versions/{versionId}/item/{itemId}", {
    params: { path: { courseId, versionId, itemId } }
  }, {enabled: !!courseId && !!versionId && !!itemId}
);
  console.log("here", courseId , versionId , itemId);
  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message ? result.error.message : "ERROR HERE") : null,
    refetch: result.refetch
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}
export function useUpdateItem(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string, itemId: string } }, body: components['schemas']['UpdateItemBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string, itemId: string } }, body: components['schemas']['UpdateItemBody'] }) => Promise<components['schemas']['ItemDataResponse']>,
  data: components['schemas']['ItemDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Item update failed') : null
  };
}

// DELETE /courses/itemGroups/{itemsGroupId}/items/{itemId}
export function useDeleteItem(): {
  mutate: (variables: { params: { path: { itemsGroupId: string, itemId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { itemsGroupId: string, itemId: string } } }) => Promise<components['schemas']['DeletedItemResponse']>,
  data: components['schemas']['DeletedItemResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("delete", "/courses/itemGroups/{itemsGroupId}/items/{itemId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Item deletion failed') : null
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}/move
export function useMoveItem(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string, itemId: string } }, body: components['schemas']['MoveItemBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string, itemId: string } }, body: components['schemas']['MoveItemBody'] }) => Promise<components['schemas']['ItemDataResponse']>,
  data: components['schemas']['ItemDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}/move");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Item move failed') : null
  };
}

// Enrollment hooks

// POST /users/enrollments/courses/{courseId}/versions/{courseVersionId}
export function useEnrollUser(): {
  mutate: (variables: { params: { path: { courseId: string, courseVersionId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { courseId: string, courseVersionId: string } } }) => Promise<components['schemas']['EnrollUserResponseData']>,
  data: components['schemas']['EnrollUserResponseData'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/users/enrollments/courses/{courseId}/versions/{courseVersionId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'User enrollment failed') : null
  };
}

// POST /users/{userId}/enrollments/courses/{courseId}/versions/{courseVersionId}/unenroll
export function useUnenrollUser(): {
  mutate: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } } }) => Promise<components['schemas']['EnrollUserResponseData']>,
  data: components['schemas']['EnrollUserResponseData'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/users/{userId}/enrollments/courses/{courseId}/versions/{courseVersionId}/unenroll");
  return {
    ...result,
    error: result.error ? (result.error.message || 'User unenrollment failed') : null
  };
}

// GET /users/enrollments
export function useUserEnrollments(page?: number, limit?: number, enabled: boolean = true): {
  data: components['schemas']['EnrollmentResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/users/enrollments", {
    params: {
      query: { page, limit }
    },
    enabled: enabled
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch user enrollments') : null,
    refetch: result.refetch
  };
}

// GET /enrollments/courses/{courseId}/versions/{courseVersionId}
export function useCourseVersionEnrollments(courseId: string | undefined, courseVersionId: string | undefined, page?: number, limit?: number, enabled: boolean = true): {
  data: components['schemas']['CourseVersionEnrollmentResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/users/enrollments/courses/{courseId}/versions/{courseVersionId}", {
    params: {
      path: { courseId, courseVersionId },
      query: { page, limit }
    },
    enabled: enabled && !!courseId && !!courseVersionId
  });
  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch course version enrollments') : null,
    refetch: result.refetch
  };
}

// Progress hooks

// GET /users/progress/courses/{courseId}/versions/{courseVersionId}/
export function useUserProgress(courseId: string, courseVersionId: string): {
  data: components['schemas']['ProgressDataResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/users/progress/courses/{courseId}/versions/{courseVersionId}/", {
    params: { path: { courseId, courseVersionId } }
  }, { enabled: !!courseId && !!courseVersionId }
  );

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch user progress') : null,
    refetch: result.refetch
  };
}

// GET /users/progress/courses/{courseId}/versions/{courseVersionId}/percentage
export function useUserProgressPercentage(courseId: string, courseVersionId: string): {
  data: {
    completed: boolean;
    percentCompleted: number;
    totalItems: number;
    completedItems: number;
  } | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/users/progress/courses/{courseId}/versions/{courseVersionId}/percentage", {
    params: { path: { courseId, courseVersionId } }
  }, { enabled: !!courseId && !!courseVersionId }
  );
  
  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch user progress percentage') : null,
    refetch: result.refetch
  };
}

// Add this hook to your hooks file
export function useUserProgressPercentageByUserId(
  userId: string, 
  courseId: string, 
  courseVersionId: string
): {
  data: {
    completed: boolean;
    percentCompleted: number;
    totalItems: number;
    completedItems: number;
  } | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery(
    "get", 
    "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/percentage",
    {
      params: {
        path: {
          userId,
          courseId,
          courseVersionId
        }
      }
    },
    {
      enabled: !!(userId && courseId && courseVersionId)
    }
  );

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch user progress percentage') : null,
    refetch: result.refetch
  };
}

// POST /users/progress/courses/{courseId}/versions/{courseVersionId}/start
export function useStartItem(): {
  mutate: (variables: { params: { path: { courseId: string, courseVersionId: string } }, body: components['schemas']['StartItemBody'] }) => void,
  mutateAsync: (variables: { params: { path: { courseId: string, courseVersionId: string } }, body: components['schemas']['StartItemBody'] }) => Promise<components['schemas']['StartItemResponse']>,
  data: components['schemas']['StartItemResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/users/progress/courses/{courseId}/versions/{courseVersionId}/start");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Failed to start item') : null
  };
}

// POST /users/progress/courses/{courseId}/versions/{courseVersionId}/stop
export function useStopItem(): {
  mutate: (variables: { params: { path: { courseId: string, courseVersionId: string } }, body: components['schemas']['StopItemBody'] }) => void,
  mutateAsync: (variables: { params: { path: { courseId: string, courseVersionId: string } }, body: components['schemas']['StopItemBody'] }) => Promise<unknown>,
  data: unknown | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/users/progress/courses/{courseId}/versions/{courseVersionId}/stop");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Failed to stop item') : null
  };
}

// PATCH /users/{userid}/progress/courses/{courseId}/versions/{courseVersionId}/reset
export function useResetProgress(): {
  mutate: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['ResetCourseProgressBody'] }) => void,
  mutateAsync: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['ResetCourseProgressBody'] }) => Promise<unknown>,
  data: unknown | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("patch", "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/reset");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Failed to reset progress') : null
  };
}


// Quiz hooks
export function useAttemptQuiz(): {
  mutate: (variables: { params: { path: { quizId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { quizId: string } } }) => Promise<{
    attemptId: string,
    questionRenderViews: QuestionRenderView[]
  }>,
  data: {
    attemptId: string,
    questionRenderViews: QuestionRenderView[]
  } | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/quizzes/{quizId}/attempt")
  return {
    mutate: result.mutate,
    mutateAsync: result.mutateAsync,
    data: result.data,
    isPending: result.isPending,
    isSuccess: result.isSuccess,
    isError: result.isError,
    isIdle: result.isIdle,
    reset: result.reset,
    status: result.status,
    error: result.error ? (result.error.message || 'Failed to attempt quiz') : null
  };
}

export function useSaveQuiz(): {
  mutate: (variables: { params: { path: { quizId: string, attemptId: string } }, body: { answers: SaveQuestion[] } }) => void,
  mutateAsync: (variables: { params: { path: { quizId: string, attemptId: string } }, body: { answers: SaveQuestion[] } }) => Promise<void>,
  data: void,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/quizzes/{quizId}/attempt/{attemptId}/save");
  return {
    mutate: result.mutate,
    mutateAsync: result.mutateAsync,
    data: result.data,
    isPending: result.isPending,
    isSuccess: result.isSuccess,
    isError: result.isError,
    isIdle: result.isIdle,
    reset: result.reset,
    status: result.status,
    error: result.error ? (result.error.message || 'Failed to attempt quiz') : null
  };
}

export function useSubmitQuiz(): {
  mutate: (variables: { params: { path: { quizId: string, attemptId: string } }, body: { answers: SaveQuestion[] } }) => SubmitQuizResponse,
  mutateAsync: (variables: { params: { path: { quizId: string, attemptId: string } }, body: { answers: SaveQuestion[] } }) => Promise<SubmitQuizResponse>,
  data: SubmitQuizResponse | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/quizzes/{quizId}/attempt/{attemptId}/submit");
  return {
    mutate: result.mutate,
    mutateAsync: result.mutateAsync,
    data: result.data,
    isPending: result.isPending,
    isSuccess: result.isSuccess,
    isError: result.isError,
    isIdle: result.isIdle,
    reset: result.reset,
    status: result.status,
    error: result.error ? (result.error.message || 'Failed to attempt quiz') : null
  };
}

interface IAttemptDetails {
  attemptId: string | ObjectId;
  submissionResultId?: string | ObjectId;
}

interface UserQuizMetricsResponse {
  _id?: string;
  quizId: string;
  userId: string;
  latestAttemptStatus: 'ATTEMPTED' | 'SUBMITTED';
  latestAttemptId?: string;
  latestSubmissionResultId?: string;
  remainingAttempts: number;
  attempts: IAttemptDetails[];
}

// GET /quizzes/{quizId}/user/{userId}
export function useUserQuizMetrics(quizId: string, userId: string): {
  data: UserQuizMetricsResponse | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/quizzes/quiz/{quizId}/user/{userId}", {
    params: { path: { quizId, userId } }
  }, {enabled: !!quizId && !!userId});

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message ? result.error.message : "ERROR HERE") : null,
    refetch: result.refetch
  };
}

// Types
interface IQuestionAnswerFeedback {
  questionId: string;
  status: 'CORRECT' | 'INCORRECT' | 'PARTIAL';
  score: number;
  answerFeedback?: string; // Optional feedback for the answer
}

interface IGradingResult {
  totalScore?: number;
  totalMaxScore?: number;
  overallFeedback?: IQuestionAnswerFeedback[];
  gradingStatus: 'PENDING' | 'PASSED' | 'FAILED' | any;
  gradedAt?: string; // ISO date string
  gradedBy?: string;
}

interface QuizSubmissionResponse {
  _id?: string;
  quizId: string;
  userId: string;
  attemptId: string;
  submittedAt: string; // ISO date string
  gradingResult?: IGradingResult;
}

// GET /quiz/{quizId}/submissions/{submissionId}
export function useQuizSubmission(quizId: string, submissionId: string): {
  data: QuizSubmissionResponse | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/quizzes/quiz/{quizId}/submissions/{submissionId}", {
    params: { path: { quizId, submissionId } }
  }, {enabled: !!quizId && !!submissionId}
);
  
  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message ? result.error.message : "Cannot fetch Quiz submission details.") : null,
    refetch: result.refetch
  };
}



export function useReportAnomaly(): {
  mutate: (variables: { body: ReportAnomalyBody }) => void,
  mutateAsync: (variables: { body: ReportAnomalyBody }) => Promise<ReportAnomalyResponse>,
  data: ReportAnomalyResponse | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/users/anomaly/");
  return {
    mutate: result.mutate,
    mutateAsync: result.mutateAsync,
    data: result.data,
    isPending: result.isPending,
    isSuccess: result.isSuccess,
    isError: result.isError,
    isIdle: result.isIdle,
    reset: result.reset,
    status: result.status,
    error: result.error ? (result.error || 'Failed to report anomaly') : null
  };
}

export function useProctoringSettings(courseId: string, versionId: string): {
  data: | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/settings/users/{courseId}/{versionId}", {
    params: { path: { courseId, versionId } }
  },
    { enabled: !!courseId && !!versionId }
  );

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch user by Firebase UID') : null,
    refetch: result.refetch
  };
}

export function useEditProctoringSettings() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const editSettings = async (
    courseId: string,
    courseVersionId: string,
    detectors: { name: string; enabled: boolean }[],
    isNew: boolean
  ) => {
    setLoading(true);
    setError(null);
    
    try {
      const result = await updateProctoringSettings(courseId, courseVersionId, detectors, isNew);
      return result;
    } catch (err: any) {
      setError(err.message || 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  return { editSettings, loading, error };
}

export function useInviteUsers(): {
  mutate: (variables: { params: { path: { courseId: string, courseVersionId: string } }, body: InviteBody }) => void,
  mutateAsync: (variables: { params: { path: { courseId: string, courseVersionId: string } }, body: InviteBody }) => Promise<InviteResponse>,
  data: InviteResponse | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/notifications/invite/courses/{courseId}/versions/{courseVersionId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Failed to invite users') : null
  };
}

export function useCourseInvites(courseId: string, courseVersionId: string, enabled: boolean = true): {
  data: InviteResponse | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/notifications/invite/courses/{courseId}/versions/{courseVersionId}", {
    params: { path: { courseId, courseVersionId } },
    enabled: enabled
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch course invites') : null,
    refetch: result.refetch
  };
}

export function useResendInvite(): {
  mutate: (variables: { params: { path: { inviteId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { inviteId: string } } }) => Promise<MessageResponse>,
  data: MessageResponse | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/notifications/invite/resend/{inviteId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Failed to resend invite') : null
  };
}

export function useCancelInvite(): {
  mutate: (variables: { params: { path: { inviteId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { inviteId: string } } }) => Promise<MessageResponse>,
  data: MessageResponse | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/notifications/invite/cancel/{inviteId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Failed to cancel invite') : null
  };
}

// GET /users/{id}/watchTime/item/itemId
export function useWatchTimeByItemId(userId: string, courseId: string, courseVersionId: string, itemId: string, type: string ): {
  data:  undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/users/{id}/watchTime/course/{courseId}/version/{courseVersionId}/item/{itemId}/type/{type}", {
    params: { path: { id: userId, courseId: courseId, courseVersionId: courseVersionId, itemId: itemId, type:type} },
  }, { enabled: !!userId && !!itemId && !!type },);

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch watch time') : null,
    refetch: result.refetch
  };
}

export function useEditUser(): {
  mutate: (variables: { body: { firstName?: string; lastName?: string } }) => void,
  mutateAsync: (variables: { body: { firstName?: string; lastName?: string } }) => Promise<void>,
  data: void | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("patch", "/users/edit");

  return {
    ...result,
    error: result.error ? (result.error.message || 'Failed to edit user') : null
  };
}